package Demo;
import java.io.*;
import java.util.*;

class Student implements Serializable {
    private String name;
    private int rollNumber;
    private String grade;

    public Student(String name, int rollNumber, String grade) {
        this.name = name;
        this.rollNumber = rollNumber;
        this.grade = grade;
    }

    public String getName() { return name; }
    public int getRollNumber() { return rollNumber; }
    public String getGrade() { return grade; }

    public void setName(String name) { this.name = name; }
    public void setGrade(String grade) { this.grade = grade; }

    @Override
    public String toString() {
        return "Roll No: " + rollNumber + ", Name: " + name + ", Grade: " + grade;
    }
}

class StudentManagementSystem {
    private List<Student> students = new ArrayList<>();
    private final String FILE_NAME = "students.dat";

    // Load students from file
    @SuppressWarnings("unchecked")
    public void loadStudents() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
            students = (List<Student>) ois.readObject();
        } catch (Exception e) {
            students = new ArrayList<>();
        }
    }

   
    public void saveStudents() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
            oos.writeObject(students);
        } catch (IOException e) {
            System.out.println("Error saving students: " + e.getMessage());
        }
    }

  
    public void addStudent(Student student) {
        students.add(student);
        saveStudents();
        System.out.println("âœ… Student added successfully!");
    }


    public void removeStudent(int rollNumber) {
        students.removeIf(s -> s.getRollNumber() == rollNumber);
        saveStudents();
        System.out.println("âœ… Student removed successfully!");
    }

    public Student searchStudent(int rollNumber) {
        for (Student s : students) {
            if (s.getRollNumber() == rollNumber) return s;
        }
        return null;
    }

    public void displayAllStudents() {
        if (students.isEmpty()) {
            System.out.println("âš  No students found!");
        } else {
            System.out.println("ðŸ“‹ Student List:");
            for (Student s : students) {
                System.out.println(s);
            }
        }
    }
}


public class StudentManagementApp {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        StudentManagementSystem sms = new StudentManagementSystem();
        sms.loadStudents();

        while (true) {
            System.out.println("\n===== Student Management System =====");
            System.out.println("1. Add Student");
            System.out.println("2. Remove Student");
            System.out.println("3. Search Student");
            System.out.println("4. Display All Students");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");

            int choice;
            try {
                choice = Integer.parseInt(sc.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("âš  Invalid input. Please enter a number.");
                continue;
            }

            switch (choice) {
                case 1:
                    System.out.print("Enter Roll Number: ");
                    int roll = Integer.parseInt(sc.nextLine());

                    // Validate Roll number is unique
                    if (sms.searchStudent(roll) != null) {
                        System.out.println("âš  Roll number already exists!");
                        break;
                    }

                    System.out.print("Enter Name: ");
                    String name = sc.nextLine();
                    if (name.isEmpty()) {
                        System.out.println("âš  Name cannot be empty!");
                        break;
                    }

                    System.out.print("Enter Grade: ");
                    String grade = sc.nextLine();
                    if (grade.isEmpty()) {
                        System.out.println("âš  Grade cannot be empty!");
                        break;
                    }

                    sms.addStudent(new Student(name, roll, grade));
                    break;

                case 2:
                    System.out.print("Enter Roll Number to remove: ");
                    int removeRoll = Integer.parseInt(sc.nextLine());
                    sms.removeStudent(removeRoll);
                    break;

                case 3:
                    System.out.print("Enter Roll Number to search: ");
                    int searchRoll = Integer.parseInt(sc.nextLine());
                    Student s = sms.searchStudent(searchRoll);
                    if (s != null) {
                        System.out.println("âœ… Found: " + s);
                    } else {
                        System.out.println("âš  Student not found!");
                    }
                    break;

                case 4:
                    sms.displayAllStudents();
                    break;

                case 5:
                    System.out.println("ðŸ‘‹ Exiting... Goodbye!");
                    sc.close();
                    return;

                default:
                    System.out.println("âš  Invalid option! Please try again.");
            }
        }
    }
}
